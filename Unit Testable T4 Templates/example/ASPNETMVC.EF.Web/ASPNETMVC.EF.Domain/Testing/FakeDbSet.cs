
 

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace ASPNETMVC.EF.Domain.Testing
{
	 using System;
	 using System.Collections;
	 using System.Collections.Generic;
	 using System.Collections.ObjectModel;
	 using System.Data.Entity;
	 using System.Linq;
	 using System.Linq.Expressions;

	public partial class FakeDbSet<T> : IDbSet<T> where T : class, new()
	{
		public FakeDbSet() : this(Enumerable.Empty<T>())
		{
		}

		public FakeDbSet(IEnumerable<T> entities)
		{
			_set = new ObservableCollection<T>();
			foreach (var entity in entities)
			{
				_set.Add(entity);
			}
			_queryableSet = _set.AsQueryable();
		}

		public T Create()
		{
			return new T();
		}

		public System.Collections.ObjectModel.ObservableCollection<T> Local
		{
			get { return _set; }
		}

		public T Add(T entity)
		{
			_set.Add(entity);
			return entity;
		}

		public T Attach(T entity)
		{
			_set.Add(entity);
			return entity;
		}

		public void Detach(T entity)
		{
			_set.Remove(entity);
		}

		public T Remove(T entity)
		{
			_set.Remove(entity);
			return entity;
		}

		public TDerivedEntity Create<TDerivedEntity>() where TDerivedEntity : class, T
		{
			return Activator.CreateInstance<TDerivedEntity>();
		}

		public virtual T Find(params object[] values)
		{
			throw new NotImplementedException();
		}

		public Type ElementType
		{
			get { return _queryableSet.ElementType; }
		}

		public Expression Expression
		{
			get { return _queryableSet.Expression; }
		}

		public IQueryProvider Provider
		{
			get { return _queryableSet.Provider; }
		}

		public IEnumerator<T> GetEnumerator()
		{
			return _set.GetEnumerator();
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return GetEnumerator();
		}

		readonly ObservableCollection<T> _set;
		readonly IQueryable<T> _queryableSet;	
	}
}
