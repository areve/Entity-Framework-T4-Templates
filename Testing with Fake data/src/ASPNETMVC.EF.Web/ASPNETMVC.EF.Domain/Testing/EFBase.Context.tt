<#@ include file="MultiOutput.tt" #>
<#@ include file="EFBase.tt"#>


<#
	var baseInterfaceFileName = GenerateBaseIContext();
    SaveOutput(string.Format("{0}.{1}", baseInterfaceFileName, "cs"));
	
	var modelInterfaceFileName = GenerateModelIContext();
    SaveOutput(string.Format("{0}.{1}", modelInterfaceFileName, "cs"));

	var modelFileName = GenerateModelContext();
    SaveOutput(string.Format("{0}.{1}", modelFileName, "cs"));

    DeleteOldOutputs();
#>


 <#+

   
    string GenerateModelContext()
    {
		const string inputFile = @"../Model/ShopModel.edmx";
		var textTransform = DynamicTextTransformation.Create(this);
		var code = new CodeGenerationTools(this);
		var ef = new MetadataTools(this);
		var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
		var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
		var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
		var itemCollection = loader.CreateEdmItemCollection(inputFile);
		var modelNamespace = loader.GetModelNamespace(inputFile);
		var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
		
		var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
		if (container == null)
		{
			return "";
		}
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#+
var codeNamespace = code.VsNamespaceSuggestion();
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
    PushIndent("    ");
}
#>
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
<#+
if (container.FunctionImports.Any())
{
#>
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
<#+
}
#>

<#=Accessibility.ForType(container)#> partial class <#=code.Escape(container)#> : DbContext, I<#=code.Escape(container)#>
{

	public <#=code.Escape(container)#>() : base("name=<#=container.Name#>")
    {
<#+
		if (!loader.IsLazyLoadingEnabled(container))
		{			
#>
			this.Configuration.LazyLoadingEnabled = false;
<#+
		}
#>
    }
	protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

<#+
    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
	<#=codeStringGenerator.IDbSet(entitySet)#>
<#+
    }

	foreach (var edmFunction in container.FunctionImports)
    {
        WriteFunctionImport(typeMapper, codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: false);
    }
	#>
    

}



}
	
<#+
return code.Escape(container);
    }
#>

<#+
    string GenerateModelIContext()
    {
		const string inputFile = @"../Model/ShopModel.edmx";
		var textTransform = DynamicTextTransformation.Create(this);
		var code = new CodeGenerationTools(this);
		var ef = new MetadataTools(this);
		var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
		var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
		var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
		var itemCollection = loader.CreateEdmItemCollection(inputFile);
		var modelNamespace = loader.GetModelNamespace(inputFile);
		var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
		
		var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
		if (container == null)
		{
			return "";
		}
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#+
var codeNamespace = code.VsNamespaceSuggestion();
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
    PushIndent("    ");
}
#>
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
<#+
if (container.FunctionImports.Any())
{
#>
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
<#+
}
#>

<#=Accessibility.ForType(container)#> partial interface I<#=code.Escape(container)#>
{

	

<#+
    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
	#>
		 <#=codeStringGenerator.IDbSet_Interface(entitySet)#>
<#+
    }

	foreach (var edmFunction in container.FunctionImports)
    {
        WriteFunctionImport(typeMapper, codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: false);
    }
	#>
    

}



}

<#+
return "I" + code.Escape(container);
    }
#>

<#+
string GenerateBaseIContext(){
		var textTransform = DynamicTextTransformation.Create(this);
		var code = new CodeGenerationTools(this);
#>

//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#+
var codeNamespace = code.VsNamespaceSuggestion();
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
    PushIndent("    ");
}
#>
using System;

public partial interface IContext : IDisposable
{
	int SaveChanges();
    void SetModified(object entity);
    void SetAdded(object entity);
}
}
<#+

return "IContext";
}

#>






