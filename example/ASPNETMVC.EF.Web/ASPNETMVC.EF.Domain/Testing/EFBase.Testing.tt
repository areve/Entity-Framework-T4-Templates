<#@ include file="EFBase.tt"#>
<#@ include file="MultiOutput.tt"#>
<#@ include file="EFBase.Settings.tt"#>
<#
	var modelName = (Settings.ModelContextName == "") ? "" : Settings.ModelContextName;
	var fakeModelName = (Settings.FakeModelContextName == "") ? "" : Settings.FakeModelContextName;
	var modelInterfaceName = (Settings.BaseModelContextInterfaceName == "") ? "" : Settings.BaseModelContextInterfaceName;
	modelInterfaceName = (modelInterfaceName=="") ? ((modelName=="") ? "" : "I" + modelName) : modelInterfaceName;

	var prefix = "Fake";
	var testingBaseDbSetFileName = GenerateTestingBaseDbSet(prefix);
	SaveOutput(string.Format("{0}.{1}", testingBaseDbSetFileName, "cs"));

	var fakeEntitiesDbSetFileName = GenerateTestingEntitiesDbSet(prefix);
	SaveOutput(string.Format("{0}.{1}", fakeEntitiesDbSetFileName, "cs"));
	

	var testingContextFileName = GenerateTestingContext(prefix, fakeModelName, modelInterfaceName, modelName);
	SaveOutput(string.Format("{0}.{1}", testingContextFileName, "cs"));

	DeleteOldOutputs();
#>

<#+
string GenerateTestingBaseDbSet(string prefix)
{
	var textTransform = DynamicTextTransformation.Create(this);
	var code = new CodeGenerationTools(this);
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#+
var codeNamespace = code.VsNamespaceSuggestion();
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
}
#>
	 using System;
	 using System.Collections;
	 using System.Collections.Generic;
	 using System.Collections.ObjectModel;
	 using System.Data.Entity;
	 using System.Linq;
	 using System.Linq.Expressions;

	public partial class <#=prefix#>DbSet<T> : IDbSet<T> where T : class, new()
	{
		public FakeDbSet() : this(Enumerable.Empty<T>())
		{
		}

		public FakeDbSet(IEnumerable<T> entities)
		{
			_set = new ObservableCollection<T>();
			foreach (var entity in entities)
			{
				_set.Add(entity);
			}
			_queryableSet = _set.AsQueryable();
		}

		public T Create()
		{
			return new T();
		}

		public System.Collections.ObjectModel.ObservableCollection<T> Local
		{
			get { return _set; }
		}

		public T Add(T entity)
		{
			_set.Add(entity);
			return entity;
		}

		public T Attach(T entity)
		{
			_set.Add(entity);
			return entity;
		}

		public void Detach(T entity)
		{
			_set.Remove(entity);
		}

		public T Remove(T entity)
		{
			_set.Remove(entity);
			return entity;
		}

		public TDerivedEntity Create<TDerivedEntity>() where TDerivedEntity : class, T
		{
			return Activator.CreateInstance<TDerivedEntity>();
		}

		public virtual T Find(params object[] values)
		{
			throw new NotImplementedException();
		}

		public Type ElementType
		{
			get { return _queryableSet.ElementType; }
		}

		public Expression Expression
		{
			get { return _queryableSet.Expression; }
		}

		public IQueryProvider Provider
		{
			get { return _queryableSet.Provider; }
		}

		public IEnumerator<T> GetEnumerator()
		{
			return _set.GetEnumerator();
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return GetEnumerator();
		}

		readonly ObservableCollection<T> _set;
		readonly IQueryable<T> _queryableSet;	
	}
}
<#+

return prefix + "DbSet";
}

#>

<#+
string GenerateTestingEntitiesDbSet(string prefix)
{
	const string inputFile = @"../Model/ShopModel.edmx";
	var textTransform = DynamicTextTransformation.Create(this);
	var code = new CodeGenerationTools(this);
	var ef = new MetadataTools(this);
	var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
	var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
	var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
	var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
	var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
	if (container == null)
	{
		return "";
	}

	if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
	{
		return string.Empty;
	}
#>


<#+
	foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
	{
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#+
	var codeNamespace = code.VsNamespaceSuggestion();

	if (!String.IsNullOrEmpty(codeNamespace))
	{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
}
#>
	using System;
	using System.Data.Entity;

	public partial class <#=prefix#><#=code.Escape(entitySet)#>DbSet : <#=prefix#>DbSet<<#=typeMapper.GetTypeName(entitySet.ElementType)#>>
	{
	}
}
<#+
}

return prefix + "EntitiesDbSet";
}

#>
<#+
 
 string GenerateTestingContext(string prefix, string fakeModelName, string modelInterfaceName, string modelName)
    {
		const string inputFile = Settings.ModelPath;
		var textTransform = DynamicTextTransformation.Create(this);
		var code = new CodeGenerationTools(this);
		var ef = new MetadataTools(this);
		var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
		var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
		var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
		var itemCollection = loader.CreateEdmItemCollection(inputFile);
		var modelNamespace = loader.GetModelNamespace(inputFile);
		var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
		
		var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
		if (container == null)
		{
			return "";
		}

		modelName = ((string.IsNullOrEmpty(modelName)) ? code.Escape(container) : modelName);
		fakeModelName = ((string.IsNullOrEmpty(fakeModelName)) ? "Fake" + modelName : fakeModelName);
		modelInterfaceName = ((string.IsNullOrEmpty(modelInterfaceName)) ? "I" + code.Escape(container) : modelInterfaceName);
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#+
var codeNamespace = code.VsNamespaceSuggestion();
if (!String.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
}
#>
	using System;
	using System.Data.Entity;
	using System.Data.Entity.Infrastructure;
<#+
if (container.FunctionImports.Any())
{
#>
	using System.Data.Objects;
	using System.Data.Objects.DataClasses;
	using System.Linq;
<#+
}
#>

<#=Accessibility.ForType(container)#> partial class <#=fakeModelName#> : <#=modelInterfaceName#>
{

	public <#=fakeModelName#>()
    {
	<#+ foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
{#>
		<#=code.Escape(entitySet)#> = new <#=prefix#><#=code.Escape(entitySet)#>DbSet();
<#+
    }
#>
    }


<#+
    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
	<#=codeStringGenerator.IDbSet(entitySet)#>
<#+
    }

	foreach (var edmFunction in container.FunctionImports)
    {
        WriteFunctionImport(typeMapper, codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: false);
    }
	#>

    public int SaveChanges()
    {
        return 0;
    }

	public void SetModified(object entity)
    {
    }

    public void SetAdded(object entity)
    {
        throw new NotImplementedException();
    }

    public void Dispose()
    {
    }

}



}
	
<#+
return fakeModelName;
    }
#>





